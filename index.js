require('dotenv').config();
const { google } = require('googleapis');
const fs = require('fs');
const { Telegraf, Markup } = require('telegraf');
const axios = require('axios');
const speech = require('@google-cloud/speech');
const https = require('https');
const cron = require('node-cron');

const bot = new Telegraf(process.env.BOT_TOKEN);

// Google Sheets Setup
const auth = new google.auth.GoogleAuth({
  keyFile: process.env.GOOGLE_SERVICE_ACCOUNT_JSON_PATH,
  scopes: ['https://www.googleapis.com/auth/spreadsheets']
});
const SHEET_ID = '1-wCeJih8Np60e17YdynvkSWz8zGSnsU4xDZPvm4uHMQ';

// Speech to Text client
const speechClient = new speech.SpeechClient({
  keyFilename: process.env.GOOGLE_SERVICE_ACCOUNT_JSON_PATH
});

// ChatGPT via OpenRouter
async function askOpenRouter(message) {
  try {
    const response = await axios.post('https://openrouter.ai/api/v1/chat/completions', {
      model: "deepseek/deepseek-r1-0528-qwen3-8b:free",
      messages: [{ role: "user", content: message }]
    }, {
      headers: {
        'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,
        'Content-Type': 'application/json'
      }
    });

    if (response.data && response.data.choices && response.data.choices.length > 0) {
      return response.data.choices[0].message.content;
    } else {
      return "ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–ª—É—á–∏–ª –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò.";
    }
  } catch (error) {
    console.error("‚ùå OpenRouter API error:", error.message);
    return "ü§ñ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò.";
  }
}

// Start command
bot.start((ctx) => ctx.reply('ü§ñ AI CEO –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!'));

// Voice messages
bot.on('voice', async (ctx) => {
  const fileId = ctx.message.voice.file_id;
  const fileLink = await ctx.telegram.getFileLink(fileId);
  const filePath = `./voice_${Date.now()}.ogg`;

  const file = fs.createWriteStream(filePath);
  https.get(fileLink.href, (response) => {
    response.pipe(file);
    file.on('finish', async () => {
      file.close();

      const audioBytes = fs.readFileSync(filePath).toString('base64');
      const audio = { content: audioBytes };
      const config = {
        encoding: 'OGG_OPUS',
        sampleRateHertz: 48000,
        languageCode: 'ru-RU'
      };
      const request = { audio, config };

      try {
        const [response] = await speechClient.recognize(request);
        const transcription = response.results.map(r => r.alternatives[0].transcript).join(' ');
        ctx.reply(`üó£Ô∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: ${transcription}`);

        const client = await auth.getClient();
        const sheets = google.sheets({ version: 'v4', auth: client });
        await sheets.spreadsheets.values.append({
          spreadsheetId: SHEET_ID,
          range: 'CEO!A1',
          valueInputOption: 'RAW',
          requestBody: {
            values: [[
              new Date().toLocaleDateString(),
              transcription,
              ctx.message.from.username || 'CEO',
              'new'
            ]]
          }
        });

        ctx.reply('‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∏–ª–∏ –∑–∞–ø–∏—Å–∏:', err.message);
        ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.');
      }
    });
  });
});

// Task detection
function isPotentialTask(text) {
  const keywords = ['–Ω–∞–¥–æ', '–Ω—É–∂–Ω–æ', '—Å–¥–µ–ª–∞–π', '–∑–∞–ø–ª–∞–Ω–∏—Ä—É–π', '—Å–æ–∑–¥–∞—Ç—å', '–æ—Ç–ø—Ä–∞–≤–∏—Ç—å', '–¥–æ–±–∞–≤—å', '—Å—Ñ–æ—Ä–º–∏—Ä—É–π', '–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è', '–æ–±—Å—É–¥–∏—Ç—å', '–Ω–∞–ø–æ–º–Ω–∏'];
  return keywords.some(word => text.toLowerCase().includes(word));
}

// Text messages
bot.on('text', async (ctx) => {
  const userMessage = ctx.message.text;
  const chatId = ctx.chat.id;

  const aiResponse = await askOpenRouter(userMessage);
  ctx.reply(aiResponse);

  if (isPotentialTask(userMessage)) {
    ctx.reply('üìå –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ –∫–∞–∫ –∑–∞–¥–∞—á—É?', Markup.inlineKeyboard([
      Markup.button.callback('‚úÖ –î–∞', `save_task:${userMessage}`),
      Markup.button.callback('‚ùå –ù–µ—Ç', 'cancel_task')
    ]));
  }
});

bot.action(/save_task:(.+)/, async (ctx) => {
  const task = ctx.match[1];
  try {
    const client = await auth.getClient();
    const sheets = google.sheets({ version: 'v4', auth: client });
    await sheets.spreadsheets.values.append({
      spreadsheetId: SHEET_ID,
      range: 'CEO!A1',
      valueInputOption: 'RAW',
      requestBody: {
        values: [[
          new Date().toLocaleDateString(),
          task,
          ctx.from.username || 'CEO',
          'new'
        ]]
      }
    });
    await ctx.editMessageText('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.');
  } catch (err) {
    console.error("‚ùå Google Sheets error:", err.message);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.");
  }
});

bot.action('cancel_task', async (ctx) => {
  await ctx.editMessageText('‚ùé –û—Ç–º–µ–Ω–∞ –∑–∞–¥–∞—á–∏.');
});

// Show tasks
bot.command('show_tasks', async (ctx) => {
  ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á:', Markup.inlineKeyboard([
    [Markup.button.callback('üìå –ù–æ–≤—ã–µ', 'tasks:new')],
    [Markup.button.callback('üîß –í —Ä–∞–±–æ—Ç–µ', 'tasks:inprogress')],
    [Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'tasks:done')]
  ]));
});

bot.action(/tasks:(.+)/, async (ctx) => {
  const status = ctx.match[1];
  try {
    const client = await auth.getClient();
    const sheets = google.sheets({ version: 'v4', auth: client });
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SHEET_ID,
      range: 'CEO!A1:D1000'
    });

    const rows = response.data.values || [];
    const filtered = rows.filter(row => row[3] && row[3].toLowerCase() === status);

    if (filtered.length === 0) {
      await ctx.reply('üì≠ –ó–∞–¥–∞—á —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º –Ω–µ—Ç.');
    } else {
      const message = filtered.map(row => `üìÖ ${row[0]} ‚Äî ${row[1]} (üë§ ${row[2]})`).join('\n\n');
      await ctx.reply(`üìã –ó–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "${status}":\n\n${message}`);
    }
  } catch (err) {
    console.error("‚ùå Google Sheets read error:", err.message);
    await ctx.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏.");
  }
});

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –≤ 08:00 AM
cron.schedule('0 8 * * *', async () => {
  const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä—ã–Ω–æ–∫ –ª–∞–Ω–¥—à–∞—Ñ—Ç–Ω—ã—Ö —É—Å–ª—É–≥ –≤ —Ä–∞–π–æ–Ω–µ GTA (–¢–æ—Ä–æ–Ω—Ç–æ, –ö–∞–Ω–∞–¥–∞). –ò—Å–ø–æ–ª—å–∑—É–π –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: lawn care, landscaping, interlock, fences, spring cleanup. –í—ã–≤–µ–¥–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á—ë—Ç, —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å.`;
  const report = await askOpenRouter(prompt);
  bot.telegram.sendMessage(process.env.TELEGRAM_OWNER_ID, `üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç:\n\n${report}`);
});

// Webhook
bot.launch({
  webhook: {
    domain: process.env.RENDER_EXTERNAL_HOSTNAME,
    port: process.env.PORT || 10000
  }
});

console.log(`‚úÖ Bot is running via webhook at https://${process.env.RENDER_EXTERNAL_HOSTNAME}`);
